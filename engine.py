RANKS = 10
FILES = 9

def bitboard_to_string(bitboard: int):
  ret = ""
  for rank in range(RANKS-1, -1, -1):
    row = ' '.join([f'{(bitboard >> (rank * FILES + file)) & 1}' for file in range(FILES-1, -1, -1)])
    ret += f"{row}\n"
  return ret


STARTING_POSITION = {
  "RED_SOLDIER"    : 0b000000000_000000000_000000000_000000000_000000000_000000000_101010101_000000000_000000000_000000000,
  "RED_CANNON"     : 0b000000000_000000000_000000000_000000000_000000000_000000000_000000000_010000010_000000000_000000000,
  "RED_GENERAL"    : 0b000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000010000,
  "RED_ADVISOR"    : 0b000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000101000,
  "RED_ELEPHANT"   : 0b000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_001000100,
  "RED_HORSE"      : 0b000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_010000010,
  "RED_CHARIOT"    : 0b000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_100000001,

  "BLACK_SOLDIER"  : 0b000000000_000000000_000000000_101010101_000000000_000000000_000000000_000000000_000000000_000000000,
  "BLACK_CANNON"   : 0b000000000_000000000_010000010_000000000_000000000_000000000_000000000_000000000_000000000_000000000,
  "BLACK_GENERAL"  : 0b000010000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000,
  "BLACK_ADVISOR"  : 0b000101000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000,
  "BLACK_ELEPHANT" : 0b001000100_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000,
  "BLACK_HORSE"    : 0b010000010_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000,
  "BLACK_CHARIOT"  : 0b100000001_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000,
}

class Piece:
  VERTICAL = 0b100000000_100000000_100000000_100000000_100000000_100000000_100000000_100000000_100000000_100000000
  HORIZONTAL = 0b000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_000000000_111111111
  NAME: str

  def __init__(self, side: bool):
    piece_name = self.__class__.NAME
    self.bit = STARTING_POSITION[f"RED_{piece_name}"] if side else STARTING_POSITION[f"BLACK_{piece_name}"]

  def __repr__(self):
    return bitboard_to_string(self.bit)

class Soldier(Piece):
  NAME = "SOLDIER"
class Cannon(Piece):
  NAME = "CANNON"
class General(Piece):
  NAME = "GENERAL"
class Advisor(Piece):
  NAME = "ADVISOR"
class Elephant(Piece):
  NAME = "ELEPHANT"
class Horse(Piece):
  NAME = "HORSE"
class Chariot(Piece):
  NAME = "CHARIOT"

class Board:
  def __init__(self):
    piece_types = [Soldier, Cannon, General, Advisor, Elephant, Horse, Chariot]
    self.red_pieces: list[Piece] = [piece(side=True) for piece in piece_types]
    self.black_pieces: list[Piece] = [piece(side=False) for piece in piece_types]
  
  def comb(self):
    from functools import reduce
    bit = reduce(lambda x, y: x | y, [i.bit for i in self.red_pieces + self.black_pieces])
    return bit

  def __repr__(self):
    return bitboard_to_string(self.comb())

if __name__ == "__main__":
  b = Board()
  print(b)

